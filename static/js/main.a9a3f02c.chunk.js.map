{"version":3,"sources":["components/grid/styles.module.scss","components/application/styles.module.scss","components/color-picker/index.js","components/grid/index.js","components/fancy-button/index.js","components/application/helpers.js","components/application/state.js","utils/array.js","components/application/index.js","index.js","components/color-picker/styles.module.scss","components/fancy-button/styles.module.scss"],"names":["module","exports","main","row","cell","alive","colorPicker","gridWrapper","generation","resetGame","ColorPicker","_ref","className","_ref$initialColor","initialColor","onChange","_useState","useState","_useState2","Object","slicedToArray","color","setColor","_useState3","_useState4","isColorPickerVisible","setIsColorPickerVisible","onColorChange","useCallback","hex","toggleColorPickerVisibility","visible","react_default","a","createElement","styles","colorPreview","style","backgroundColor","onClick","lib","colorPickerContainer","onAliveCellColorChange","document","documentElement","setProperty","Grid","grid","onCellToggle","debounce","Math","Infinity","leading","trailing","color_picker","map","rowIndex","key","isAlive","cellIndex","concat","classNames","defineProperty","onMouseEnter","event","buttons","onTouchMove","console","log","FancyButton","restProps","objectWithoutProperties","assign","fancyButton","getNextGenerationMatrix","columnIndex","aliveNeighborsCount","startRowIndex","max","endRowIndex","min","length","startColumnIndex","endColumnIndex","slice","flatMap","filter","Boolean","getAliveNeighborsCount","INITIAL_BOARD_SIZE","width","height","GameState","useGameOfLifeState","gameState","setGameState","gridSize","setGridSize","_useState5","_useState6","setGrid","_useState7","_useState8","setGeneration","intervalIdRef","useRef","onGameStart","newGrid","Array","from","useEffect","current","setInterval","clearInterval","value","matrix","toConsumableArray","updateMatrixValueAtAddress","onGameStateToggle","Application","_useGameOfLifeState","fancy_button","components_grid","ReactDOM","render","application","getElementById"],"mappings":"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","file":"static/js/main.a9a3f02c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3WX6t\",\"row\":\"styles_row__2aVm0\",\"cell\":\"styles_cell__2cc11\",\"alive\":\"styles_alive__31u9Y\",\"colorPicker\":\"styles_colorPicker__3uuhr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3kmzk\",\"gridWrapper\":\"styles_gridWrapper__3tbQX\",\"generation\":\"styles_generation__23yMC\",\"resetGame\":\"styles_resetGame__EYhSj\"};","import React, { useState, useCallback } from 'react';\nimport { SketchPicker } from 'react-color';\nimport styles from './styles.module.scss';\n\nconst DEFAULT_COLOR = '#000';\n\nconst ColorPicker = ({ className, initialColor = DEFAULT_COLOR, onChange }) => {\n  const [ color, setColor ] = useState(initialColor);\n  const [ isColorPickerVisible, setIsColorPickerVisible ] = useState()\n\n  const onColorChange = useCallback((color) => {\n    setColor(color.hex);\n    onChange(color.hex);\n  }, [ onChange ]);\n\n  const toggleColorPickerVisibility = useCallback(() => {\n    setIsColorPickerVisible(visible => !visible);\n  }, []);\n\n  return (\n    <div className={className}>\n      <div\n        className={styles.colorPreview}\n        style={{ backgroundColor: color }}\n        onClick={toggleColorPickerVisibility} />\n\n      {isColorPickerVisible && (\n        <SketchPicker\n          className={styles.colorPickerContainer}\n          color={color}\n          onChange={onColorChange} />\n      )}\n    </div>\n  );\n};\n\nexport default ColorPicker;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { debounce } from 'lodash';\nimport ColorPicker from '../color-picker';\nimport styles from './styles.module.scss';\n\nconst LEFT_BUTTON_BIT_MASK = 1;\nconst INITIAL_ALIVE_CELL_COLOR = '#E55743';\n\nconst onAliveCellColorChange = (color) => {\n  document.documentElement.style.setProperty('--alive-cell-color', color);\n};\n\nonAliveCellColorChange(INITIAL_ALIVE_CELL_COLOR);\n\nconst Grid = ({ grid, onCellToggle }) => {\n  const onCellToggleDebounced = debounce(onCellToggle, Math.Infinity, {\n    leading: true,\n    trailing: false\n  });\n\n  return (\n    <div className={styles.main}>\n      <ColorPicker\n        className={styles.colorPicker}\n        initialColor={INITIAL_ALIVE_CELL_COLOR}\n        onChange={onAliveCellColorChange} />\n\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className={styles.row}>\n          {row.map((isAlive, cellIndex) => (\n            <span\n              key={`${cellIndex}-${isAlive}`}\n              className={classNames(styles.cell, {\n                [styles.alive]: isAlive\n              })}\n              onMouseEnter={(event) => {\n                if (event.buttons & LEFT_BUTTON_BIT_MASK) {\n                  onCellToggle(rowIndex, cellIndex);\n                }\n              }}\n              onTouchMove={(event) => {\n                console.log(event);\n                onCellToggle(rowIndex, cellIndex);\n              }}\n              onClick={() => onCellToggle(rowIndex, cellIndex)} />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Grid\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\nconst FancyButton = ({ className, ...restProps }) => (\n  <button className={classNames(className, styles.fancyButton)} {...restProps} />\n);\n\nexport default FancyButton;\n","// const createNeighboursCountMatrix = (grid) => {\n//   const matrix = grid.map(row => {\n//     return Array.from({ length: row.length }, () => 0);\n//   });\n\n//   for (let rowIndex = 0; rowIndex < grid.length; rowIndex++){\n//     for (let columnIndex = 0; columnIndex < grid[0].length; columnIndex++) {\n//       if (grid[rowIndex][columnIndex]) {\n//         for (let row = Math.max(0, rowIndex - 1); row <= Math.min(rowIndex + 1, grid.length - 1); row++) {\n//           for (let column = Math.max(0, columnIndex - 1); column <= Math.min(columnIndex + 1, grid[0].length-1); column++) {\n//             if (row !== rowIndex && column !== columnIndex) {\n//               matrix[row][column]++;\n//             }\n//           }\n//         }\n//       }\n//     }\n//   }\n\n//   return matrix;\n// };\n\nconst getAliveNeighborsCount = (grid, rowIndex, columnIndex) => {\n  const startRowIndex = Math.max(rowIndex - 1, 0);\n  const endRowIndex = Math.min(rowIndex + 1, grid.length - 1) + 1;\n  const startColumnIndex = Math.max(columnIndex - 1, 0);\n  const endColumnIndex = Math.min(columnIndex + 1, grid[rowIndex].length - 1) + 1;\n\n  const count = grid\n    .slice(startRowIndex, endRowIndex)\n    .flatMap((row) => row.slice(startColumnIndex, endColumnIndex))\n    .filter(Boolean)\n    .length;\n\n  return count - (grid[rowIndex][columnIndex] ? 1 : 0);\n};\n\nexport const getNextGenerationMatrix = (grid) => grid.map((row, rowIndex) => {\n  return row.map((isAlive, columnIndex) => {\n    const aliveNeighborsCount = getAliveNeighborsCount(grid, rowIndex, columnIndex);\n\n    if (!isAlive && aliveNeighborsCount === 3) {\n      return true;\n    }\n\n    if (!isAlive) {\n      return false;\n    }\n\n    if (aliveNeighborsCount === 2 || aliveNeighborsCount === 3) {\n      return true;\n    }\n\n    return false;\n  });\n});","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { updateMatrixValueAtAddress } from '../../utils/array';\nimport { getNextGenerationMatrix } from './helpers';\n\nconst INITIAL_BOARD_SIZE = { width: 35, height: 35 };\nconst INTERVAL = 50;\n\nexport const GameState = {\n  Started: 'started',\n  Paused: 'paused'\n};\n\nexport const useGameOfLifeState = () => {\n  const [ gameState, setGameState ] = useState(GameState.Paused);\n  const [ gridSize, setGridSize ] = useState(INITIAL_BOARD_SIZE);\n  const [ grid, setGrid ] = useState([]);\n  const [ generation, setGeneration ] = useState(0);\n  const intervalIdRef = useRef(null);\n\n  const onGameStart = useCallback(() => {\n    const { width, height } = gridSize;\n    const newGrid = Array.from({ length: height }, () =>\n      Array.from({ length: width }, () => false)\n    );\n    setGrid(newGrid);\n    setGameState(GameState.Paused);\n    setGeneration(0);\n  }, [ gridSize ]);\n\n  useEffect(onGameStart, [ gridSize ]);\n\n  useEffect(() => {\n    if (gameState === GameState.Paused) {\n      clearInterval(intervalIdRef.current);\n      return;\n    }\n\n    intervalIdRef.current = setInterval(() => {\n      setGeneration(generation => generation + 1);\n      setGrid(getNextGenerationMatrix);\n    }, INTERVAL);\n  }, [ gameState ]);\n\n  const onCellToggle = useCallback((rowIndex, columnIndex) => {\n    setGrid(grid => {\n      const value = grid[rowIndex][columnIndex];\n      return updateMatrixValueAtAddress(grid, rowIndex, columnIndex, !value);\n    });\n  }, []);\n\n  const onGameStateToggle = useCallback(() => {\n    const newGameState = gameState === GameState.Paused\n      ? GameState.Started\n      : GameState.Paused;\n    setGameState(newGameState);\n  }, [ gameState ]);\n\n  return { gameState, grid, generation, onCellToggle, onGameStateToggle, gridSize, setGridSize, onGameStart };\n};\n","export const updateMatrixValueAtAddress = (matrix, rowIndex, columnIndex, value) => [\n  ...matrix.slice(0, rowIndex),\n  [\n    ...matrix[rowIndex].slice(0, columnIndex),\n    value,\n    ...matrix[rowIndex].slice(columnIndex + 1)\n  ],\n  ...matrix.slice(rowIndex + 1)\n];\n","import React from 'react';\nimport Grid from '../grid';\nimport FancyButton from '../fancy-button';\nimport { useGameOfLifeState, GameState } from './state';\nimport styles from './styles.module.scss';\n\nconst Application = () => {\n  const { gameState, grid, generation, onCellToggle, onGameStateToggle, onGameStart } = useGameOfLifeState();\n\n  return (\n    <div className={styles.main}>\n    <div className={styles.generation}>\n      Generation: {generation}\n    </div>\n    <FancyButton onClick={onGameStateToggle}>\n        {gameState === GameState.Paused && 'Start'}\n        {gameState !== GameState.Paused && 'Pause'}\n    </FancyButton>\n     <button \n      className={styles.resetGame}\n      onClick={onGameStart}>\n        Reset\n    </button>\n    <div className={styles.gridWrapper}>\n      <Grid\n        grid={grid} \n        onCellToggle={onCellToggle} />\n    </div>\n    </div>\n  )\n};\n\nexport default Application;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from './components/application';\nimport './index.css';\n\nReactDOM.render(\n  <Application />,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorPreview\":\"styles_colorPreview__2T9j1\",\"colorPickerContainer\":\"styles_colorPickerContainer__n2T3S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fancyButton\":\"styles_fancyButton__2E91G\"};"],"sourceRoot":""}