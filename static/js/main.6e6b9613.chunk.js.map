{"version":3,"sources":["components/grid/styles.module.scss","components/application/styles.module.scss","components/color-picker/index.js","components/grid/index.js","components/fancy-button/index.js","components/application/helpers.js","components/application/state.js","utils/array.js","components/application/index.js","index.js","components/color-picker/styles.module.scss","components/fancy-button/styles.module.scss"],"names":["module","exports","main","fadeIn","row","cell","alive","colorPicker","generation","generationNumber","wrapper","resetGame","ColorPicker","_ref","className","_ref$initialColor","initialColor","onChange","_useState","useState","_useState2","Object","slicedToArray","color","setColor","_useState3","_useState4","isColorPickerVisible","setIsColorPickerVisible","onColorChange","useCallback","hex","toggleColorPickerVisibility","visible","react_default","a","createElement","styles","colorPreview","style","backgroundColor","onClick","lib","colorPickerContainer","onAliveCellColorChange","document","documentElement","setProperty","Grid","grid","onCellToggle","color_picker","map","rowIndex","key","isAlive","cellIndex","concat","classNames","defineProperty","onMouseEnter","event","buttons","onTouchMove","console","log","FancyButton","restProps","objectWithoutProperties","assign","fancyButton","getNextGenerationMatrix","columnIndex","aliveNeighborsCount","startRowIndex","Math","max","endRowIndex","min","length","startColumnIndex","endColumnIndex","slice","flatMap","filter","Boolean","getAliveNeighborsCount","INITIAL_BOARD_SIZE","width","height","GameState","useGameOfLifeState","gameState","setGameState","gridSize","setGridSize","_useState5","_useState6","setGrid","_useState7","_useState8","setGeneration","intervalIdRef","useRef","onGameStart","newGrid","Array","from","clearInterval","current","useEffect","setInterval","value","matrix","toConsumableArray","updateMatrixValueAtAddress","onGameStateToggle","Application","_useGameOfLifeState","Fragment","fancy_button","components_grid","ReactDOM","render","application","getElementById"],"mappings":"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","file":"static/js/main.6e6b9613.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"styles_main__3WX6t\",\"fadeIn\":\"styles_fadeIn__1PyUK\",\"row\":\"styles_row__2aVm0\",\"cell\":\"styles_cell__2cc11\",\"alive\":\"styles_alive__31u9Y\",\"colorPicker\":\"styles_colorPicker__3uuhr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"generation\":\"styles_generation__23yMC\",\"generationNumber\":\"styles_generationNumber__3v7vO\",\"wrapper\":\"styles_wrapper__2weTp\",\"resetGame\":\"styles_resetGame__EYhSj\"};","import React, { useState, useCallback } from \"react\";\nimport { SketchPicker } from \"react-color\";\nimport styles from \"./styles.module.scss\";\n\nconst DEFAULT_COLOR = \"#000\";\n\nconst ColorPicker = ({ className, initialColor = DEFAULT_COLOR, onChange }) => {\n  const [color, setColor] = useState(initialColor);\n  const [isColorPickerVisible, setIsColorPickerVisible] = useState();\n\n  const onColorChange = useCallback(\n    color => {\n      setColor(color.hex);\n      onChange(color.hex);\n    },\n    [onChange]\n  );\n\n  const toggleColorPickerVisibility = useCallback(() => {\n    setIsColorPickerVisible(visible => !visible);\n  }, []);\n\n  return (\n    <div className={className}>\n      Color:&nbsp;\n      <div\n        className={styles.colorPreview}\n        style={{ backgroundColor: color }}\n        onClick={toggleColorPickerVisibility}\n      />\n      {isColorPickerVisible && (\n        <SketchPicker\n          className={styles.colorPickerContainer}\n          color={color}\n          onChange={onColorChange}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default ColorPicker;\n","import React from \"react\";\nimport classNames from \"classnames\";\nimport ColorPicker from \"../color-picker\";\nimport styles from \"./styles.module.scss\";\n\nconst LEFT_BUTTON_BIT_MASK = 1;\nconst INITIAL_ALIVE_CELL_COLOR = \"#E55743\";\n\nconst onAliveCellColorChange = color => {\n  document.documentElement.style.setProperty(\"--alive-cell-color\", color);\n};\n\nonAliveCellColorChange(INITIAL_ALIVE_CELL_COLOR);\n\nconst Grid = ({ grid, onCellToggle }) => {\n  return (\n    <div className={styles.main}>\n      <ColorPicker\n        className={styles.colorPicker}\n        initialColor={INITIAL_ALIVE_CELL_COLOR}\n        onChange={onAliveCellColorChange}\n      />\n\n      {grid.map((row, rowIndex) => (\n        <div key={rowIndex} className={styles.row}>\n          {row.map((isAlive, cellIndex) => (\n            <span\n              key={`${cellIndex}-${isAlive}`}\n              className={classNames(styles.cell, {\n                [styles.alive]: isAlive\n              })}\n              onMouseEnter={event => {\n                if (event.buttons & LEFT_BUTTON_BIT_MASK) {\n                  onCellToggle(rowIndex, cellIndex);\n                }\n              }}\n              onTouchMove={event => {\n                console.log(event);\n                onCellToggle(rowIndex, cellIndex);\n              }}\n              onClick={() => onCellToggle(rowIndex, cellIndex)}\n            />\n          ))}\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Grid;\n","import React from 'react';\nimport classNames from 'classnames';\nimport styles from './styles.module.scss';\n\nconst FancyButton = ({ className, ...restProps }) => (\n  <button className={classNames(className, styles.fancyButton)} {...restProps} />\n);\n\nexport default FancyButton;\n","// const createNeighboursCountMatrix = (grid) => {\n//   const matrix = grid.map(row => {\n//     return Array.from({ length: row.length }, () => 0);\n//   });\n\n//   for (let rowIndex = 0; rowIndex < grid.length; rowIndex++){\n//     for (let columnIndex = 0; columnIndex < grid[0].length; columnIndex++) {\n//       if (grid[rowIndex][columnIndex]) {\n//         for (let row = Math.max(0, rowIndex - 1); row <= Math.min(rowIndex + 1, grid.length - 1); row++) {\n//           for (let column = Math.max(0, columnIndex - 1); column <= Math.min(columnIndex + 1, grid[0].length-1); column++) {\n//             if (row !== rowIndex && column !== columnIndex) {\n//               matrix[row][column]++;\n//             }\n//           }\n//         }\n//       }\n//     }\n//   }\n\n//   return matrix;\n// };\n\nconst getAliveNeighborsCount = (grid, rowIndex, columnIndex) => {\n  const startRowIndex = Math.max(rowIndex - 1, 0);\n  const endRowIndex = Math.min(rowIndex + 1, grid.length - 1) + 1;\n  const startColumnIndex = Math.max(columnIndex - 1, 0);\n  const endColumnIndex = Math.min(columnIndex + 1, grid[rowIndex].length - 1) + 1;\n\n  const count = grid\n    .slice(startRowIndex, endRowIndex)\n    .flatMap((row) => row.slice(startColumnIndex, endColumnIndex))\n    .filter(Boolean)\n    .length;\n\n  return count - (grid[rowIndex][columnIndex] ? 1 : 0);\n};\n\nexport const getNextGenerationMatrix = (grid) => grid.map((row, rowIndex) => {\n  return row.map((isAlive, columnIndex) => {\n    const aliveNeighborsCount = getAliveNeighborsCount(grid, rowIndex, columnIndex);\n\n    if (!isAlive && aliveNeighborsCount === 3) {\n      return true;\n    }\n\n    if (!isAlive) {\n      return false;\n    }\n\n    if (aliveNeighborsCount === 2 || aliveNeighborsCount === 3) {\n      return true;\n    }\n\n    return false;\n  });\n});","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { updateMatrixValueAtAddress } from '../../utils/array';\nimport { getNextGenerationMatrix } from './helpers';\n\nconst INITIAL_BOARD_SIZE = { width: 35, height: 35 };\nconst INTERVAL = 50;\n\nexport const GameState = {\n  Started: 'started',\n  Paused: 'paused'\n};\n\nexport const useGameOfLifeState = () => {\n  const [ gameState, setGameState ] = useState(GameState.Paused);\n  const [ gridSize, setGridSize ] = useState(INITIAL_BOARD_SIZE);\n  const [ grid, setGrid ] = useState([]);\n  const [ generation, setGeneration ] = useState(0);\n  const intervalIdRef = useRef(null);\n\n  const onGameStart = useCallback(() => {\n    const { width, height } = gridSize;\n    const newGrid = Array.from({ length: height }, () =>\n      Array.from({ length: width }, () => false)\n    );\n    clearInterval(intervalIdRef.current);\n    setGameState(GameState.Paused);\n    setGrid(newGrid);\n    setGeneration(0);\n  }, [ gridSize ]);\n\n  useEffect(onGameStart, [ gridSize ]);\n\n  useEffect(() => {\n    if (gameState === GameState.Paused) {\n      clearInterval(intervalIdRef.current);\n      return;\n    }\n\n    intervalIdRef.current = setInterval(() => {\n      setGeneration(generation => generation + 1);\n      setGrid(getNextGenerationMatrix);\n    }, INTERVAL);\n  }, [ gameState ]);\n\n  const onCellToggle = useCallback((rowIndex, columnIndex) => {\n    setGrid(grid => {\n      const value = grid[rowIndex][columnIndex];\n      return updateMatrixValueAtAddress(grid, rowIndex, columnIndex, !value);\n    });\n  }, []);\n\n  const onGameStateToggle = useCallback(() => {\n    const newGameState = gameState === GameState.Paused\n      ? GameState.Started\n      : GameState.Paused;\n    setGameState(newGameState);\n  }, [ gameState ]);\n\n  return { gameState, grid, generation, onCellToggle, onGameStateToggle, gridSize, setGridSize, onGameStart };\n};\n","export const updateMatrixValueAtAddress = (matrix, rowIndex, columnIndex, value) => [\n  ...matrix.slice(0, rowIndex),\n  [\n    ...matrix[rowIndex].slice(0, columnIndex),\n    value,\n    ...matrix[rowIndex].slice(columnIndex + 1)\n  ],\n  ...matrix.slice(rowIndex + 1)\n];\n","import React from \"react\";\nimport Grid from \"../grid\";\nimport FancyButton from \"../fancy-button\";\nimport { useGameOfLifeState, GameState } from \"./state\";\nimport styles from \"./styles.module.scss\";\n\nconst Application = () => {\n  const {\n    gameState,\n    grid,\n    generation,\n    onCellToggle,\n    onGameStateToggle,\n    onGameStart\n  } = useGameOfLifeState();\n\n  return (\n    <>\n      <div className={styles.generation}>\n        Generation:&nbsp;\n        <span className={styles.generationNumber}>{generation}</span>\n      </div>\n      <div className={styles.wrapper}>\n        <FancyButton onClick={onGameStateToggle}>\n          {gameState === GameState.Paused && \"Start\"}\n          {gameState !== GameState.Paused && \"Pause\"}\n        </FancyButton>\n        <button className={styles.resetGame} onClick={onGameStart}>\n          Reset\n        </button>\n        <Grid grid={grid} onCellToggle={onCellToggle} />\n      </div>\n    </>\n  );\n};\n\nexport default Application;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Application from './components/application';\nimport './index.css';\n\nReactDOM.render(\n  <Application />,\n  document.getElementById('root')\n);","// extracted by mini-css-extract-plugin\nmodule.exports = {\"colorPreview\":\"styles_colorPreview__2T9j1\",\"colorPickerContainer\":\"styles_colorPickerContainer__n2T3S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"fancyButton\":\"styles_fancyButton__2E91G\"};"],"sourceRoot":""}